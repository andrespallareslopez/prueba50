<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="Microsoft.SqlServer.Management.Common" #>



<#+ 
void GenerarMensaje()
{
string appConfig = this.Host.ResolvePath("App.config");
if(!File.Exists(appConfig))
{
	Error("App.config not exists");
}
ExeConfigurationFileMap configFile = new ExeConfigurationFileMap();
configFile.ExeConfigFilename = appConfig;
var configuration = ConfigurationManager.OpenMappedExeConfiguration(configFile, ConfigurationUserLevel.None);
var connectionString = configuration.ConnectionStrings.ConnectionStrings["prueba"].ConnectionString;

SqlConnection sqlConnection = new SqlConnection(connectionString);
ServerConnection serverConnection = new ServerConnection(sqlConnection);
Server server = new Server(serverConnection);
var db = server.Databases[server.ConnectionContext.DatabaseName];

var tables = server.Databases[server.ConnectionContext.DatabaseName].Tables;



#>

//using System;
using System.Collections.Generic;
using System.Linq;

namespace <#= server.ConnectionContext.DatabaseName #>.Entities
{
    //**<#= connectionString #>

    <#+       
        foreach( Table tabla in tables){
    #>
       <#+ if (tabla.IsSystemObject == false ){ #>
        
       // <#= tabla.Name #>
          
          

          <#+ foreach(Column columna in tabla.Columns){ #>
             
             // <#= columna.Name #> ( <#= columna.InPrimaryKey   #> )  //tipo: <#= MapField(columna.DataType.ToString()) #>

          <#+ } #>

       <#+ } #>    
    <#+
        }
    #>

}

<#+
    }
#>

<#+ 

  private bool IsPrimaryKey(Table tabla,string campo){

      bool isKey=false;


      return true;

  }
  private string MapField(string typeField){
      string tField=typeField;

      switch (tField)
      {
          case "varchar":
             return "string";
             break;
          case "nvarchar":
            return "string";
            break;
          case "bit":
            return "boolean";
            break;
          default:
             
             return typeField;
             break;
 


      }


      return "";
  }
#>