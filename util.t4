<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>

<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="Microsoft.SqlServer.Management.Common" #>
<#@ import namespace="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#+
private string getConnectionString(){
	
	string appConfig = this.Host.ResolvePath("App.config");
	if(!File.Exists(appConfig))
	{
	    Error("App.config not exists");
	}
	ExeConfigurationFileMap configFile = new ExeConfigurationFileMap();
	configFile.ExeConfigFilename = appConfig;
	var configuration = ConfigurationManager.OpenMappedExeConfiguration(configFile, ConfigurationUserLevel.None);
	var connectionString = configuration.ConnectionStrings.ConnectionStrings["prueba"].ConnectionString;

	return connectionString;
}

public List<string> getDependencies(string nombreTabla){

	List<string> lista= new List<string>();
	string connectionString = getConnectionString();

    SqlConnection sqlConnection = new SqlConnection(connectionString);

	string cadSql ="SELECT routine_name, routine_type FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_DEFINITION LIKE '%" + nombreTabla + "%'";

	sqlConnection.Open();
	SqlCommand cmd = new SqlCommand(cadSql, sqlConnection);
    SqlDataReader results = cmd.ExecuteReader();
	
	while (results.Read())
     {
       lista.Add(results["routine_name"].ToString());           
     }



	sqlConnection.Close();



	return lista;
}

#>

<#+ 
void showDependencies(){

	List<string> lista = getDependencies("Estrategia");

#>

   <#+ 
     foreach(string el in lista){
   #>

    <#= el #>
   <#+ } #>


<#+ 
}
#>

<#+ 

public List<string> getEnumTable(){

	
	List<string> lista= new List<string>();
	string connectionString = getConnectionString();

    SqlConnection sqlConnection = new SqlConnection(connectionString);
	ServerConnection serverConnection = new ServerConnection(sqlConnection);
		Server server = new Server(serverConnection);
		var db = server.Databases[server.ConnectionContext.DatabaseName];

		//var tables = server.Databases[server.ConnectionContext.DatabaseName].Tables;

		string ServerName = Environment.MachineName;

		var Elementos = db.EnumObjects();
		var rows = Elementos.Select();
	      foreach( DataRow fila in rows){
              if (fila["Schema"].ToString()!= "sys" && 
			      fila["Schema"].ToString()!= "" && 
				  fila["Schema"].ToString()!= "MessageType" && 
				  fila["Schema"].ToString()!= "DatabaseRole" &&
				  fila["Schema"].ToString()!="INFORMATION_SCHEMA"){
				  if (fila["DatabaseObjectTypes"].ToString()=="Table"){
					  lista.Add(fila["Name"].ToString());
                  }
              }
          }
	return lista;
}

public List<string> getEnumByType(string type){
    List<string> lista= new List<string>();
	string connectionString = getConnectionString();

    SqlConnection sqlConnection = new SqlConnection(connectionString);
	ServerConnection serverConnection = new ServerConnection(sqlConnection);
		Server server = new Server(serverConnection);
		var db = server.Databases[server.ConnectionContext.DatabaseName];

		//var tables = server.Databases[server.ConnectionContext.DatabaseName].Tables;

		string ServerName = Environment.MachineName;

		var Elementos = db.EnumObjects();
		var rows = Elementos.Select();
	      foreach( DataRow fila in rows){
              if (fila["Schema"].ToString()!= "sys" && 
			      fila["Schema"].ToString()!= "" && 
				  fila["Schema"].ToString()!= "MessageType" && 
				  fila["Schema"].ToString()!= "DatabaseRole" &&
				  fila["Schema"].ToString()!="INFORMATION_SCHEMA"){
				  if (fila["DatabaseObjectTypes"].ToString()==type){
					  lista.Add(fila["Name"].ToString());
                  }
              }
          }
    
	return lista;
}

public List<string> getColumnsByTable(string nameTable){

    List<string> lista= new List<string>();
	string connectionString = getConnectionString();
	
    SqlConnection sqlConnection = new SqlConnection(connectionString);
    ServerConnection serverConnection = new ServerConnection(sqlConnection);
    Server server = new Server(serverConnection);
    var db = server.Databases[server.ConnectionContext.DatabaseName];


	var tables = server.Databases[server.ConnectionContext.DatabaseName].Tables;

    Table table = null;
    
	foreach(Table tabla in tables){
		if (tabla.Name == nameTable){
			table=tabla;
			break;
        }
    }


	if (table!=null){
	  foreach(Column columna in table.Columns){
		lista.Add(columna.Name);
       
      }
    }

	return lista;
}

public class Columna {

	public Columna(){}

	public string Nombre {get;set;}
	public string Tipo {get;set;}
	public string Descripcion {get;set;}
	public int Length {get;set;}

}

public List<Columna> getColumnsPropertiesByTable(string nameTable){
	List<Columna> lista = new List<Columna>();

	string connectionString = getConnectionString();
	
    SqlConnection sqlConnection = new SqlConnection(connectionString);
    ServerConnection serverConnection = new ServerConnection(sqlConnection);
    Server server = new Server(serverConnection);
    var db = server.Databases[server.ConnectionContext.DatabaseName];


	var tables = server.Databases[server.ConnectionContext.DatabaseName].Tables;

    Table table = null;
    
	foreach(Table tabla in tables){
		if (tabla.Name == nameTable){
			table=tabla;
			break;
        }
    }

	
	if (table!=null){
	  foreach(Column columna in table.Columns){
        Columna column = new Columna();
		column.Nombre = columna.Name;
		column.Tipo = columna.DataType.Name;
		column.Descripcion = columna.DataType.ToString();
		
		lista.Add(column);       
      }
    }

	return lista;
}

public Microsoft.SqlServer.Management.Smo.Table getTableObjectByNameTable(string nameTable){

	List<Columna> lista = new List<Columna>();

	string connectionString = getConnectionString();
	
    SqlConnection sqlConnection = new SqlConnection(connectionString);
    ServerConnection serverConnection = new ServerConnection(sqlConnection);
    Server server = new Server(serverConnection);
    var db = server.Databases[server.ConnectionContext.DatabaseName];


	var tables = server.Databases[server.ConnectionContext.DatabaseName].Tables;

    Table table = null;
    
	foreach(Table tabla in tables){
		if (tabla.Name == nameTable){
			table=tabla;
			break;
        }
    }

    return table;
}



public List<Microsoft.SqlServer.Management.Smo.Column> getColumnsObjectByTable(Microsoft.SqlServer.Management.Smo.Table tempTable){
	List<Microsoft.SqlServer.Management.Smo.Column> lista = new List<Microsoft.SqlServer.Management.Smo.Column>();

    Table table = tempTable ;
    

	
	if (table!=null){
	  foreach(Column columna in table.Columns){
       
		lista.Add(columna);       
      }
    }

	return lista;

}


public System.Data.DataTable getColumnIndexes(Column columna){

	return columna.EnumIndexes();

}

public List<string> getColumnsIndex(System.Data.DataTable tempTable){
    List<string> lista = new List<string>();
    /*
	foreach(System.Data.DataColumn columna in tempTable.Columns){
		lista.Add(columna.ColumnName);
    }
	*/
	var rows= tempTable.Select();
	foreach( DataRow fila in rows){
       lista.Add(fila["Urn"].ToString());         
    }

	return lista;
}
#>

<#+  
void showEnumTable(){

	List<string> lista = getEnumTable();

#>

   <#+ 
     foreach(string el in lista){
   #>

    <#= el #>
   <#+ } #>


<#+ 
}
#>



<#+  
void showEnumView(){
	//StoredProcedure
	List<string> lista = getEnumByType("View");

#>

   <#+ 
     foreach(string el in lista){
   #>

    <#= el #>
   <#+ } #>


<#+ 
}
#>




<#+  
void showEnumSP(){
	//StoredProcedure
	List<string> lista = getEnumByType("StoredProcedure");

#>

   <#+ 
     foreach(string el in lista){
   #>

    <#= el #>
   <#+ } #>


<#+ 
}
#>


<#+  
void showColumnsByTable(){
	//StoredProcedure
	List<string> lista = getColumnsByTable("SolCambio");

#>

   <#+ 
     foreach(string el in lista){
   #>

    <#= el #>
   <#+ } #>


<#+ 
}
#>


<#+  
void showColumnsPropertiesByTable(){
	
	List<Columna> lista = getColumnsPropertiesByTable("SolCambio");

#>

   <#+ 
     foreach(Columna el in lista){
   #>

    <#= el.Nombre #> - <#= el.Tipo #> - <#= el.Descripcion #>
   <#+ } #>


<#+ 
}
#>



<#+  
void showColumnsDataTable(){
	
	Microsoft.SqlServer.Management.Smo.Table tabla = getTableObjectByNameTable("SolCambio");
	List<Microsoft.SqlServer.Management.Smo.Column> lista = getColumnsObjectByTable(tabla);
#>
<#+  
	foreach(Column columna in lista){
		System.Data.DataTable metaColumn =  getColumnIndexes(columna);
		List<string> templista = getColumnsIndex(metaColumn);
#>		  
		   <#+ 
		   foreach(string el in templista){
		   #>

			<#= el #>
		
	<#+ } #>
<#+  
    }
#>
<#+ 
}
#>



<#+  
void showIndexesTable(){
	
	Microsoft.SqlServer.Management.Smo.Table tabla = getTableObjectByNameTable("EstrategiaAACC");
	List<Microsoft.SqlServer.Management.Smo.Column> lista = getColumnsObjectByTable(tabla);
#>
<#+  
	foreach(Column columna in lista){
		System.Data.DataTable metaColumn =  getColumnIndexes(columna);
		List<string> templista = getColumnsIndex(metaColumn);
#>		  
		   <#+ 
		   foreach(string el in templista){
		   #>

			<#= columna.Name #> - <#= el #>
		
	<#+ } #>
<#+  
    }
#>
<#+ 
}
#>
